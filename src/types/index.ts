export const Theme = {
  LIGHT: "light",
  DARK: "dark",
  SYSTEM: "system",
} as const;

export const NodeEnv = {
  DEVELOPMENT: "development",
  PRODUCTION: "production",
} as const;

export type Theme = (typeof Theme)[keyof typeof Theme];
export type NodeEnv = (typeof NodeEnv)[keyof typeof NodeEnv];

export type { User } from "@supabase/supabase-js";

// YouTube Watch Later Extension Types

export interface VideoElement {
  readonly videoId: string;
  readonly title: string;
  readonly channel: string;
  readonly duration: string;
  readonly thumbnailUrl: string;
  readonly url: string;
  readonly element: HTMLElement;
  readonly index: number;
}

export interface SelectedVideo extends VideoElement {
  readonly isSelected: boolean;
}

export interface VideoSelectionState {
  readonly selectedVideos: Map<string, SelectedVideo>;
  readonly lastSelectedIndex: number | null;
  readonly totalVideos: number;
}

export interface TranscriptSegment {
  readonly text: string;
  readonly start: number;
  readonly duration: number;
}

export interface VideoTranscript {
  readonly videoId: string;
  readonly title: string;
  readonly channel: string;
  readonly publishDate: string;
  readonly description: string;
  readonly url: string;
  readonly transcript: string;
  readonly segments: readonly TranscriptSegment[];
  readonly wasTruncated: boolean;
  readonly language: string;
  readonly isAutoGenerated: boolean;
}

export interface TranscriptFetchResult {
  readonly success: boolean;
  readonly transcript?: VideoTranscript;
  readonly error?: string;
}

export interface BulkTranscriptResult {
  readonly successful: readonly VideoTranscript[];
  readonly failed: readonly { videoId: string; error: string; title: string }[];
  readonly totalRequested: number;
}

export interface YouTubeTranscriptResponse {
  readonly actions?: readonly {
    readonly updateEngagementPanelAction?: {
      readonly content?: {
        readonly transcriptRenderer?: {
          readonly body?: {
            readonly transcriptBodyRenderer?: {
              readonly cueGroups?: readonly {
                readonly transcriptCueGroupRenderer?: {
                  readonly cues?: readonly {
                    readonly transcriptCueRenderer?: {
                      readonly cue?: {
                        readonly simpleText?: string;
                      };
                      readonly startOffsetMs?: string;
                      readonly durationMs?: string;
                    };
                  }[];
                };
              }[];
            };
          };
        };
      };
    };
  }[];
}

export const TRANSCRIPT_CHARACTER_LIMIT = 20000;

export const KeyboardShortcuts = {
  SELECT_ALL: { ctrl: true, key: "a" },
  TOGGLE_SELECT: { ctrl: true, key: "click" },
  RANGE_SELECT: { shift: true, key: "click" },
} as const;
