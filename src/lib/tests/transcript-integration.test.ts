import { describe, expect, it } from "bun:test";

// Simple integration test for the transcript functionality
describe("Transcript Integration", () => {
  it("should have the InnerTube API available for import", async () => {
    const { InnerTubeTranscriptFetcher } = await import(
      "~/lib/innertube-transcript"
    );
    expect(InnerTubeTranscriptFetcher).toBeDefined();
    expect(typeof InnerTubeTranscriptFetcher).toBe("function");
  });

  it("should be able to create InnerTube fetcher instance", () => {
    const {
      InnerTubeTranscriptFetcher,
    } = require("~/lib/innertube-transcript");
    const fetcher = new InnerTubeTranscriptFetcher();
    expect(fetcher).toBeDefined();
    expect(typeof fetcher.getTranscript).toBe("function");
  });

  it("should export the main transcript functions", async () => {
    const {
      extractVideoId,
      fetchVideoTranscript,
      fetchBulkTranscripts,
      formatTranscriptsForClipboard,
    } = await import("~/lib/youtube-transcript");

    expect(extractVideoId).toBeDefined();
    expect(fetchVideoTranscript).toBeDefined();
    expect(fetchBulkTranscripts).toBeDefined();
    expect(formatTranscriptsForClipboard).toBeDefined();
  });

  it("should maintain the correct interfaces", () => {
    // Test that our types are correct
    const mockTranscriptResult = {
      success: true as const,
      transcript: {
        videoId: "test123",
        title: "Test Video",
        channel: "Test Channel",
        publishDate: "",
        description: "",
        url: "https://www.youtube.com/watch?v=test123",
        transcript: "Hello world",
        segments: [{ text: "Hello world", start: 0, duration: 2000 }] as const,
        wasTruncated: false,
        language: "en",
        isAutoGenerated: true,
      },
    };

    expect(mockTranscriptResult.success).toBe(true);
    expect(mockTranscriptResult.transcript.videoId).toBe("test123");
    expect(mockTranscriptResult.transcript.segments).toHaveLength(1);
  });
});
